!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?factory(exports,require("@angular/core"),require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("agm-direction",["exports","@angular/core","rxjs","rxjs/operators"],factory):factory(((global=global||self).ng=global.ng||{},global.ng.angularLibraryStarter={}),global.ng.core,global.rxjs,global.rxjs.operators)}(this,function(exports,core,rxjs,operators){"use strict";var extendStatics,GoogleMapsScriptProtocol,MapsAPILoader=function(){function MapsAPILoader(){}return MapsAPILoader.decorators=[{type:core.Injectable}],MapsAPILoader}(),GoogleMapsAPIWrapper=function(){function GoogleMapsAPIWrapper(_loader,_zone){var _this=this;this._loader=_loader,this._zone=_zone,this._map=new Promise(function(resolve){_this._mapResolver=resolve})}return GoogleMapsAPIWrapper.prototype.createMap=function(el,mapOptions){var _this=this;return this._zone.runOutsideAngular(function(){return _this._loader.load().then(function(){var map=new google.maps.Map(el,mapOptions);_this._mapResolver(map)})})},GoogleMapsAPIWrapper.prototype.setMapOptions=function(options){this._map.then(function(m){m.setOptions(options)})},GoogleMapsAPIWrapper.prototype.createMarker=function(options,addToMap){return void 0===options&&(options={}),void 0===addToMap&&(addToMap=!0),this._map.then(function(map){return addToMap&&(options.map=map),new google.maps.Marker(options)})},GoogleMapsAPIWrapper.prototype.createInfoWindow=function(options){return this._map.then(function(){return new google.maps.InfoWindow(options)})},GoogleMapsAPIWrapper.prototype.createCircle=function(options){return this._map.then(function(map){return options.map=map,new google.maps.Circle(options)})},GoogleMapsAPIWrapper.prototype.createRectangle=function(options){return this._map.then(function(map){return options.map=map,new google.maps.Rectangle(options)})},GoogleMapsAPIWrapper.prototype.createPolyline=function(options){return this.getNativeMap().then(function(map){var line=new google.maps.Polyline(options);return line.setMap(map),line})},GoogleMapsAPIWrapper.prototype.createPolygon=function(options){return this.getNativeMap().then(function(map){var polygon=new google.maps.Polygon(options);return polygon.setMap(map),polygon})},GoogleMapsAPIWrapper.prototype.createDataLayer=function(options){return this._map.then(function(m){var data=new google.maps.Data(options);return data.setMap(m),data})},GoogleMapsAPIWrapper.prototype.containsLocation=function(latLng,polygon){return google.maps.geometry.poly.containsLocation(latLng,polygon)},GoogleMapsAPIWrapper.prototype.subscribeToMapEvent=function(eventName){var _this=this;return new rxjs.Observable(function(observer){_this._map.then(function(m){m.addListener(eventName,function(arg){_this._zone.run(function(){return observer.next(arg)})})})})},GoogleMapsAPIWrapper.prototype.clearInstanceListeners=function(){this._map.then(function(map){google.maps.event.clearInstanceListeners(map)})},GoogleMapsAPIWrapper.prototype.setCenter=function(latLng){return this._map.then(function(map){return map.setCenter(latLng)})},GoogleMapsAPIWrapper.prototype.getZoom=function(){return this._map.then(function(map){return map.getZoom()})},GoogleMapsAPIWrapper.prototype.getBounds=function(){return this._map.then(function(map){return map.getBounds()})},GoogleMapsAPIWrapper.prototype.getMapTypeId=function(){return this._map.then(function(map){return map.getMapTypeId()})},GoogleMapsAPIWrapper.prototype.setZoom=function(zoom){return this._map.then(function(map){return map.setZoom(zoom)})},GoogleMapsAPIWrapper.prototype.getCenter=function(){return this._map.then(function(map){return map.getCenter()})},GoogleMapsAPIWrapper.prototype.panTo=function(latLng){return this._map.then(function(map){return map.panTo(latLng)})},GoogleMapsAPIWrapper.prototype.panBy=function(x,y){return this._map.then(function(map){return map.panBy(x,y)})},GoogleMapsAPIWrapper.prototype.fitBounds=function(latLng){return this._map.then(function(map){return map.fitBounds(latLng)})},GoogleMapsAPIWrapper.prototype.panToBounds=function(latLng){return this._map.then(function(map){return map.panToBounds(latLng)})},GoogleMapsAPIWrapper.prototype.getNativeMap=function(){return this._map},GoogleMapsAPIWrapper.prototype.triggerMapEvent=function(eventName){return this._map.then(function(m){return google.maps.event.trigger(m,eventName)})},GoogleMapsAPIWrapper.decorators=[{type:core.Injectable}],GoogleMapsAPIWrapper.ctorParameters=function(){return[{type:MapsAPILoader},{type:core.NgZone}]},GoogleMapsAPIWrapper}(),CircleManager=function(){function CircleManager(_apiWrapper,_zone){this._apiWrapper=_apiWrapper,this._zone=_zone,this._circles=new Map}return CircleManager.prototype.addCircle=function(circle){this._circles.set(circle,this._apiWrapper.createCircle({center:{lat:circle.latitude,lng:circle.longitude},clickable:circle.clickable,draggable:circle.draggable,editable:circle.editable,fillColor:circle.fillColor,fillOpacity:circle.fillOpacity,radius:circle.radius,strokeColor:circle.strokeColor,strokeOpacity:circle.strokeOpacity,strokePosition:circle.strokePosition,strokeWeight:circle.strokeWeight,visible:circle.visible,zIndex:circle.zIndex}))},CircleManager.prototype.removeCircle=function(circle){var _this=this;return this._circles.get(circle).then(function(c){c.setMap(null),_this._circles.delete(circle)})},CircleManager.prototype.setOptions=function(circle,options){return this._circles.get(circle).then(function(c){return c.setOptions(options)})},CircleManager.prototype.getBounds=function(circle){return this._circles.get(circle).then(function(c){return c.getBounds()})},CircleManager.prototype.getCenter=function(circle){return this._circles.get(circle).then(function(c){return c.getCenter()})},CircleManager.prototype.getRadius=function(circle){return this._circles.get(circle).then(function(c){return c.getRadius()})},CircleManager.prototype.setCenter=function(circle){return this._circles.get(circle).then(function(c){return c.setCenter({lat:circle.latitude,lng:circle.longitude})})},CircleManager.prototype.setEditable=function(circle){return this._circles.get(circle).then(function(c){return c.setEditable(circle.editable)})},CircleManager.prototype.setDraggable=function(circle){return this._circles.get(circle).then(function(c){return c.setDraggable(circle.draggable)})},CircleManager.prototype.setVisible=function(circle){return this._circles.get(circle).then(function(c){return c.setVisible(circle.visible)})},CircleManager.prototype.setRadius=function(circle){return this._circles.get(circle).then(function(c){return c.setRadius(circle.radius)})},CircleManager.prototype.createEventObservable=function(eventName,circle){var _this=this;return new rxjs.Observable(function(observer){var listener=null;return _this._circles.get(circle).then(function(c){listener=c.addListener(eventName,function(e){return _this._zone.run(function(){return observer.next(e)})})}),function(){null!==listener&&listener.remove()}})},CircleManager.decorators=[{type:core.Injectable}],CircleManager.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper},{type:core.NgZone}]},CircleManager}(),RectangleManager=function(){function RectangleManager(_apiWrapper,_zone){this._apiWrapper=_apiWrapper,this._zone=_zone,this._rectangles=new Map}return RectangleManager.prototype.addRectangle=function(rectangle){this._rectangles.set(rectangle,this._apiWrapper.createRectangle({bounds:{north:rectangle.north,east:rectangle.east,south:rectangle.south,west:rectangle.west},clickable:rectangle.clickable,draggable:rectangle.draggable,editable:rectangle.editable,fillColor:rectangle.fillColor,fillOpacity:rectangle.fillOpacity,strokeColor:rectangle.strokeColor,strokeOpacity:rectangle.strokeOpacity,strokePosition:rectangle.strokePosition,strokeWeight:rectangle.strokeWeight,visible:rectangle.visible,zIndex:rectangle.zIndex}))},RectangleManager.prototype.removeRectangle=function(rectangle){var _this=this;return this._rectangles.get(rectangle).then(function(r){r.setMap(null),_this._rectangles.delete(rectangle)})},RectangleManager.prototype.setOptions=function(rectangle,options){return this._rectangles.get(rectangle).then(function(r){return r.setOptions(options)})},RectangleManager.prototype.getBounds=function(rectangle){return this._rectangles.get(rectangle).then(function(r){return r.getBounds()})},RectangleManager.prototype.setBounds=function(rectangle){return this._rectangles.get(rectangle).then(function(r){return r.setBounds({north:rectangle.north,east:rectangle.east,south:rectangle.south,west:rectangle.west})})},RectangleManager.prototype.setEditable=function(rectangle){return this._rectangles.get(rectangle).then(function(r){return r.setEditable(rectangle.editable)})},RectangleManager.prototype.setDraggable=function(rectangle){return this._rectangles.get(rectangle).then(function(r){return r.setDraggable(rectangle.draggable)})},RectangleManager.prototype.setVisible=function(rectangle){return this._rectangles.get(rectangle).then(function(r){return r.setVisible(rectangle.visible)})},RectangleManager.prototype.createEventObservable=function(eventName,rectangle){var _this=this;return rxjs.Observable.create(function(observer){var listener=null;return _this._rectangles.get(rectangle).then(function(r){listener=r.addListener(eventName,function(e){return _this._zone.run(function(){return observer.next(e)})})}),function(){null!==listener&&listener.remove()}})},RectangleManager.decorators=[{type:core.Injectable}],RectangleManager.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper},{type:core.NgZone}]},RectangleManager}(),MarkerManager=function(){function MarkerManager(_mapsWrapper,_zone){this._mapsWrapper=_mapsWrapper,this._zone=_zone,this._markers=new Map}return MarkerManager.prototype.deleteMarker=function(marker){var _this=this,m=this._markers.get(marker);return null==m?Promise.resolve():m.then(function(m){return _this._zone.run(function(){m.setMap(null),_this._markers.delete(marker)})})},MarkerManager.prototype.updateMarkerPosition=function(marker){return this._markers.get(marker).then(function(m){return m.setPosition({lat:marker.latitude,lng:marker.longitude})})},MarkerManager.prototype.updateTitle=function(marker){return this._markers.get(marker).then(function(m){return m.setTitle(marker.title)})},MarkerManager.prototype.updateLabel=function(marker){return this._markers.get(marker).then(function(m){m.setLabel(marker.label)})},MarkerManager.prototype.updateDraggable=function(marker){return this._markers.get(marker).then(function(m){return m.setDraggable(marker.draggable)})},MarkerManager.prototype.updateIcon=function(marker){return this._markers.get(marker).then(function(m){return m.setIcon(marker.iconUrl)})},MarkerManager.prototype.updateOpacity=function(marker){return this._markers.get(marker).then(function(m){return m.setOpacity(marker.opacity)})},MarkerManager.prototype.updateVisible=function(marker){return this._markers.get(marker).then(function(m){return m.setVisible(marker.visible)})},MarkerManager.prototype.updateZIndex=function(marker){return this._markers.get(marker).then(function(m){return m.setZIndex(marker.zIndex)})},MarkerManager.prototype.updateClickable=function(marker){return this._markers.get(marker).then(function(m){return m.setClickable(marker.clickable)})},MarkerManager.prototype.updateAnimation=function(marker){return this._markers.get(marker).then(function(m){"string"==typeof marker.animation?m.setAnimation(google.maps.Animation[marker.animation]):m.setAnimation(marker.animation)})},MarkerManager.prototype.addMarker=function(marker){var markerPromise=this._mapsWrapper.createMarker({position:{lat:marker.latitude,lng:marker.longitude},label:marker.label,draggable:marker.draggable,icon:marker.iconUrl,opacity:marker.opacity,visible:marker.visible,zIndex:marker.zIndex,title:marker.title,clickable:marker.clickable,animation:"string"==typeof marker.animation?google.maps.Animation[marker.animation]:marker.animation});this._markers.set(marker,markerPromise)},MarkerManager.prototype.getNativeMarker=function(marker){return this._markers.get(marker)},MarkerManager.prototype.createEventObservable=function(eventName,marker){var _this=this;return new rxjs.Observable(function(observer){_this._markers.get(marker).then(function(m){m.addListener(eventName,function(e){return _this._zone.run(function(){return observer.next(e)})})})})},MarkerManager.decorators=[{type:core.Injectable}],MarkerManager.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper},{type:core.NgZone}]},MarkerManager}(),InfoWindowManager=function(){function InfoWindowManager(_mapsWrapper,_zone,_markerManager){this._mapsWrapper=_mapsWrapper,this._zone=_zone,this._markerManager=_markerManager,this._infoWindows=new Map}return InfoWindowManager.prototype.deleteInfoWindow=function(infoWindow){var _this=this,iWindow=this._infoWindows.get(infoWindow);return null==iWindow?Promise.resolve():iWindow.then(function(i){return _this._zone.run(function(){i.close(),_this._infoWindows.delete(infoWindow)})})},InfoWindowManager.prototype.setPosition=function(infoWindow){return this._infoWindows.get(infoWindow).then(function(i){return i.setPosition({lat:infoWindow.latitude,lng:infoWindow.longitude})})},InfoWindowManager.prototype.setZIndex=function(infoWindow){return this._infoWindows.get(infoWindow).then(function(i){return i.setZIndex(infoWindow.zIndex)})},InfoWindowManager.prototype.open=function(infoWindow){var _this=this;return this._infoWindows.get(infoWindow).then(function(w){return null!=infoWindow.hostMarker?_this._markerManager.getNativeMarker(infoWindow.hostMarker).then(function(marker){return _this._mapsWrapper.getNativeMap().then(function(map){return w.open(map,marker)})}):_this._mapsWrapper.getNativeMap().then(function(map){return w.open(map)})})},InfoWindowManager.prototype.close=function(infoWindow){return this._infoWindows.get(infoWindow).then(function(w){return w.close()})},InfoWindowManager.prototype.setOptions=function(infoWindow,options){return this._infoWindows.get(infoWindow).then(function(i){return i.setOptions(options)})},InfoWindowManager.prototype.addInfoWindow=function(infoWindow){var options={content:infoWindow.content,maxWidth:infoWindow.maxWidth,zIndex:infoWindow.zIndex,disableAutoPan:infoWindow.disableAutoPan};"number"==typeof infoWindow.latitude&&"number"==typeof infoWindow.longitude&&(options.position={lat:infoWindow.latitude,lng:infoWindow.longitude});var infoWindowPromise=this._mapsWrapper.createInfoWindow(options);this._infoWindows.set(infoWindow,infoWindowPromise)},InfoWindowManager.prototype.createEventObservable=function(eventName,infoWindow){var _this=this;return new rxjs.Observable(function(observer){_this._infoWindows.get(infoWindow).then(function(i){i.addListener(eventName,function(e){return _this._zone.run(function(){return observer.next(e)})})})})},InfoWindowManager.decorators=[{type:core.Injectable}],InfoWindowManager.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper},{type:core.NgZone},{type:MarkerManager}]},InfoWindowManager}(),PolygonManager=function(){function PolygonManager(_mapsWrapper,_zone){this._mapsWrapper=_mapsWrapper,this._zone=_zone,this._polygons=new Map}return PolygonManager.prototype.addPolygon=function(path){var polygonPromise=this._mapsWrapper.createPolygon({clickable:path.clickable,draggable:path.draggable,editable:path.editable,fillColor:path.fillColor,fillOpacity:path.fillOpacity,geodesic:path.geodesic,paths:path.paths,strokeColor:path.strokeColor,strokeOpacity:path.strokeOpacity,strokeWeight:path.strokeWeight,visible:path.visible,zIndex:path.zIndex});this._polygons.set(path,polygonPromise)},PolygonManager.prototype.updatePolygon=function(polygon){var _this=this,m=this._polygons.get(polygon);return null==m?Promise.resolve():m.then(function(l){return _this._zone.run(function(){l.setPaths(polygon.paths)})})},PolygonManager.prototype.setPolygonOptions=function(path,options){return this._polygons.get(path).then(function(l){l.setOptions(options)})},PolygonManager.prototype.deletePolygon=function(paths){var _this=this,m=this._polygons.get(paths);return null==m?Promise.resolve():m.then(function(l){return _this._zone.run(function(){l.setMap(null),_this._polygons.delete(paths)})})},PolygonManager.prototype.createEventObservable=function(eventName,path){var _this=this;return new rxjs.Observable(function(observer){_this._polygons.get(path).then(function(l){l.addListener(eventName,function(e){return _this._zone.run(function(){return observer.next(e)})})})})},PolygonManager.decorators=[{type:core.Injectable}],PolygonManager.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper},{type:core.NgZone}]},PolygonManager}(),PolylineManager=function(){function PolylineManager(_mapsWrapper,_zone){this._mapsWrapper=_mapsWrapper,this._zone=_zone,this._polylines=new Map}return PolylineManager._convertPoints=function(line){return line._getPoints().map(function(point){return{lat:point.latitude,lng:point.longitude}})},PolylineManager.prototype.addPolyline=function(line){var path=PolylineManager._convertPoints(line),polylinePromise=this._mapsWrapper.createPolyline({clickable:line.clickable,draggable:line.draggable,editable:line.editable,geodesic:line.geodesic,strokeColor:line.strokeColor,strokeOpacity:line.strokeOpacity,strokeWeight:line.strokeWeight,visible:line.visible,zIndex:line.zIndex,path:path});this._polylines.set(line,polylinePromise)},PolylineManager.prototype.updatePolylinePoints=function(line){var _this=this,path=PolylineManager._convertPoints(line),m=this._polylines.get(line);return null==m?Promise.resolve():m.then(function(l){return _this._zone.run(function(){l.setPath(path)})})},PolylineManager.prototype.setPolylineOptions=function(line,options){return this._polylines.get(line).then(function(l){l.setOptions(options)})},PolylineManager.prototype.deletePolyline=function(line){var _this=this,m=this._polylines.get(line);return null==m?Promise.resolve():m.then(function(l){return _this._zone.run(function(){l.setMap(null),_this._polylines.delete(line)})})},PolylineManager.prototype.createEventObservable=function(eventName,line){var _this=this;return new rxjs.Observable(function(observer){_this._polylines.get(line).then(function(l){l.addListener(eventName,function(e){return _this._zone.run(function(){return observer.next(e)})})})})},PolylineManager.decorators=[{type:core.Injectable}],PolylineManager.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper},{type:core.NgZone}]},PolylineManager}(),KmlLayerManager=function(){function KmlLayerManager(_wrapper,_zone){this._wrapper=_wrapper,this._zone=_zone,this._layers=new Map}return KmlLayerManager.prototype.addKmlLayer=function(layer){var newLayer=this._wrapper.getNativeMap().then(function(m){return new google.maps.KmlLayer({clickable:layer.clickable,map:m,preserveViewport:layer.preserveViewport,screenOverlays:layer.screenOverlays,suppressInfoWindows:layer.suppressInfoWindows,url:layer.url,zIndex:layer.zIndex})});this._layers.set(layer,newLayer)},KmlLayerManager.prototype.setOptions=function(layer,options){this._layers.get(layer).then(function(l){return l.setOptions(options)})},KmlLayerManager.prototype.deleteKmlLayer=function(layer){var _this=this;this._layers.get(layer).then(function(l){l.setMap(null),_this._layers.delete(layer)})},KmlLayerManager.prototype.createEventObservable=function(eventName,layer){var _this=this;return new rxjs.Observable(function(observer){_this._layers.get(layer).then(function(m){m.addListener(eventName,function(e){return _this._zone.run(function(){return observer.next(e)})})})})},KmlLayerManager.decorators=[{type:core.Injectable}],KmlLayerManager.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper},{type:core.NgZone}]},KmlLayerManager}(),DataLayerManager=function(){function DataLayerManager(_wrapper,_zone){this._wrapper=_wrapper,this._zone=_zone,this._layers=new Map}return DataLayerManager.prototype.addDataLayer=function(layer){var _this=this,newLayer=this._wrapper.createDataLayer({style:layer.style}).then(function(d){return layer.geoJson&&_this.getDataFeatures(d,layer.geoJson).then(function(features){return d.features=features}),d});this._layers.set(layer,newLayer)},DataLayerManager.prototype.deleteDataLayer=function(layer){var _this=this;this._layers.get(layer).then(function(l){l.setMap(null),_this._layers.delete(layer)})},DataLayerManager.prototype.updateGeoJson=function(layer,geoJson){var _this=this;this._layers.get(layer).then(function(l){l.forEach(function(feature){l.remove(feature);var index=l.features.indexOf(feature,0);-1<index&&l.features.splice(index,1)}),_this.getDataFeatures(l,geoJson).then(function(features){return l.features=features})})},DataLayerManager.prototype.setDataOptions=function(layer,options){this._layers.get(layer).then(function(l){l.setControlPosition(options.controlPosition),l.setControls(options.controls),l.setDrawingMode(options.drawingMode),l.setStyle(options.style)})},DataLayerManager.prototype.createEventObservable=function(eventName,layer){var _this=this;return new rxjs.Observable(function(observer){_this._layers.get(layer).then(function(d){d.addListener(eventName,function(e){return _this._zone.run(function(){return observer.next(e)})})})})},DataLayerManager.prototype.getDataFeatures=function(d,geoJson){return new Promise(function(resolve,reject){if("object"==typeof geoJson)try{resolve(d.addGeoJson(geoJson))}catch(e){reject(e)}else"string"==typeof geoJson?d.loadGeoJson(geoJson,null,resolve):reject("Impossible to extract features from geoJson: wrong argument type")})},DataLayerManager.decorators=[{type:core.Injectable}],DataLayerManager.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper},{type:core.NgZone}]},DataLayerManager}(),FitBoundsAccessor=function(){},FitBoundsService=function(){function FitBoundsService(loader){var _this=this;this._boundsChangeSampleTime$=new rxjs.BehaviorSubject(200),this._includeInBounds$=new rxjs.BehaviorSubject(new Map),this.bounds$=rxjs.from(loader.load()).pipe(operators.flatMap(function(){return _this._includeInBounds$}),operators.sample(this._boundsChangeSampleTime$.pipe(operators.switchMap(function(time){return rxjs.timer(0,time)}))),operators.map(function(includeInBounds){return _this._generateBounds(includeInBounds)}),operators.shareReplay(1))}return FitBoundsService.prototype._generateBounds=function(includeInBounds){var bounds=new google.maps.LatLngBounds;return includeInBounds.forEach(function(b){return bounds.extend(b)}),bounds},FitBoundsService.prototype.addToBounds=function(latLng){var id=this._createIdentifier(latLng);if(!this._includeInBounds$.value.has(id)){var map=this._includeInBounds$.value;map.set(id,latLng),this._includeInBounds$.next(map)}},FitBoundsService.prototype.removeFromBounds=function(latLng){var map=this._includeInBounds$.value;map.delete(this._createIdentifier(latLng)),this._includeInBounds$.next(map)},FitBoundsService.prototype.changeFitBoundsChangeSampleTime=function(timeMs){this._boundsChangeSampleTime$.next(timeMs)},FitBoundsService.prototype.getBounds$=function(){return this.bounds$},FitBoundsService.prototype._createIdentifier=function(latLng){return latLng.lat+"+"+latLng.lng},FitBoundsService.decorators=[{type:core.Injectable}],FitBoundsService.ctorParameters=function(){return[{type:MapsAPILoader}]},FitBoundsService}(),infoWindowId=(function(){function AgmMap(_elem,_mapsWrapper,_fitBoundsService){this._elem=_elem,this._mapsWrapper=_mapsWrapper,this._fitBoundsService=_fitBoundsService,this.longitude=0,this.latitude=0,this.zoom=8,this.draggable=!0,this.disableDoubleClickZoom=!1,this.disableDefaultUI=!1,this.scrollwheel=!0,this.keyboardShortcuts=!0,this.zoomControl=!0,this.styles=[],this.usePanning=!1,this.streetViewControl=!0,this.fitBounds=!1,this.scaleControl=!1,this.mapTypeControl=!1,this.panControl=!1,this.rotateControl=!1,this.fullscreenControl=!1,this.mapTypeId="roadmap",this.clickableIcons=!0,this.gestureHandling="auto",this._observableSubscriptions=[],this.mapClick=new core.EventEmitter,this.mapRightClick=new core.EventEmitter,this.mapDblClick=new core.EventEmitter,this.centerChange=new core.EventEmitter,this.boundsChange=new core.EventEmitter,this.mapTypeIdChange=new core.EventEmitter,this.idle=new core.EventEmitter,this.zoomChange=new core.EventEmitter,this.mapReady=new core.EventEmitter}AgmMap.prototype.ngOnInit=function(){var container=this._elem.nativeElement.querySelector(".agm-map-container-inner");this._initMapInstance(container)},AgmMap.prototype._initMapInstance=function(el){var _this=this;this._mapsWrapper.createMap(el,{center:{lat:this.latitude||0,lng:this.longitude||0},zoom:this.zoom,minZoom:this.minZoom,maxZoom:this.maxZoom,disableDefaultUI:this.disableDefaultUI,disableDoubleClickZoom:this.disableDoubleClickZoom,scrollwheel:this.scrollwheel,backgroundColor:this.backgroundColor,draggable:this.draggable,draggableCursor:this.draggableCursor,draggingCursor:this.draggingCursor,keyboardShortcuts:this.keyboardShortcuts,styles:this.styles,zoomControl:this.zoomControl,zoomControlOptions:this.zoomControlOptions,streetViewControl:this.streetViewControl,streetViewControlOptions:this.streetViewControlOptions,scaleControl:this.scaleControl,scaleControlOptions:this.scaleControlOptions,mapTypeControl:this.mapTypeControl,mapTypeControlOptions:this.mapTypeControlOptions,panControl:this.panControl,panControlOptions:this.panControlOptions,rotateControl:this.rotateControl,rotateControlOptions:this.rotateControlOptions,fullscreenControl:this.fullscreenControl,fullscreenControlOptions:this.fullscreenControlOptions,mapTypeId:this.mapTypeId,clickableIcons:this.clickableIcons,gestureHandling:this.gestureHandling}).then(function(){return _this._mapsWrapper.getNativeMap()}).then(function(map){return _this.mapReady.emit(map)}),this._handleMapCenterChange(),this._handleMapZoomChange(),this._handleMapMouseEvents(),this._handleBoundsChange(),this._handleMapTypeIdChange(),this._handleIdleEvent()},AgmMap.prototype.ngOnDestroy=function(){this._observableSubscriptions.forEach(function(s){return s.unsubscribe()}),this._mapsWrapper.clearInstanceListeners(),this._fitBoundsSubscription&&this._fitBoundsSubscription.unsubscribe()},AgmMap.prototype.ngOnChanges=function(changes){this._updateMapOptionsChanges(changes),this._updatePosition(changes)},AgmMap.prototype._updateMapOptionsChanges=function(changes){var options={};Object.keys(changes).filter(function(k){return-1!==AgmMap._mapOptionsAttributes.indexOf(k)}).forEach(function(k){options[k]=changes[k].currentValue}),this._mapsWrapper.setMapOptions(options)},AgmMap.prototype.triggerResize=function(recenter){var _this=this;return void 0===recenter&&(recenter=!0),new Promise(function(resolve){setTimeout(function(){return _this._mapsWrapper.triggerMapEvent("resize").then(function(){recenter&&(null!=_this.fitBounds?_this._fitBounds():_this._setCenter()),resolve()})})})},AgmMap.prototype._updatePosition=function(changes){(null!=changes.latitude||null!=changes.longitude||changes.fitBounds)&&("fitBounds"in changes?this._fitBounds():"number"==typeof this.latitude&&"number"==typeof this.longitude&&this._setCenter())},AgmMap.prototype._setCenter=function(){var newCenter={lat:this.latitude,lng:this.longitude};this.usePanning?this._mapsWrapper.panTo(newCenter):this._mapsWrapper.setCenter(newCenter)},AgmMap.prototype._fitBounds=function(){switch(this.fitBounds){case!0:this._subscribeToFitBoundsUpdates();break;case!1:this._fitBoundsSubscription&&this._fitBoundsSubscription.unsubscribe();break;default:this._updateBounds(this.fitBounds)}},AgmMap.prototype._subscribeToFitBoundsUpdates=function(){var _this=this;this._fitBoundsSubscription=this._fitBoundsService.getBounds$().subscribe(function(b){return _this._updateBounds(b)})},AgmMap.prototype._updateBounds=function(bounds){if(this._isLatLngBoundsLiteral(bounds)&&google&&google.maps){var newBounds=google.maps.LatLngBounds();newBounds.union(bounds),bounds=newBounds}this.usePanning?this._mapsWrapper.panToBounds(bounds):this._mapsWrapper.fitBounds(bounds)},AgmMap.prototype._isLatLngBoundsLiteral=function(bounds){return null!=bounds&&void 0===bounds.extend},AgmMap.prototype._handleMapCenterChange=function(){var _this=this,s=this._mapsWrapper.subscribeToMapEvent("center_changed").subscribe(function(){_this._mapsWrapper.getCenter().then(function(center){_this.latitude=center.lat(),_this.longitude=center.lng(),_this.centerChange.emit({lat:_this.latitude,lng:_this.longitude})})});this._observableSubscriptions.push(s)},AgmMap.prototype._handleBoundsChange=function(){var _this=this,s=this._mapsWrapper.subscribeToMapEvent("bounds_changed").subscribe(function(){_this._mapsWrapper.getBounds().then(function(bounds){_this.boundsChange.emit(bounds)})});this._observableSubscriptions.push(s)},AgmMap.prototype._handleMapTypeIdChange=function(){var _this=this,s=this._mapsWrapper.subscribeToMapEvent("maptypeid_changed").subscribe(function(){_this._mapsWrapper.getMapTypeId().then(function(mapTypeId){_this.mapTypeIdChange.emit(mapTypeId)})});this._observableSubscriptions.push(s)},AgmMap.prototype._handleMapZoomChange=function(){var _this=this,s=this._mapsWrapper.subscribeToMapEvent("zoom_changed").subscribe(function(){_this._mapsWrapper.getZoom().then(function(z){_this.zoom=z,_this.zoomChange.emit(z)})});this._observableSubscriptions.push(s)},AgmMap.prototype._handleIdleEvent=function(){var _this=this,s=this._mapsWrapper.subscribeToMapEvent("idle").subscribe(function(){_this.idle.emit(void 0)});this._observableSubscriptions.push(s)},AgmMap.prototype._handleMapMouseEvents=function(){var _this=this;[{name:"click",emitter:this.mapClick},{name:"rightclick",emitter:this.mapRightClick},{name:"dblclick",emitter:this.mapDblClick}].forEach(function(e){var s=_this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function(event){var value={coords:{lat:event.latLng.lat(),lng:event.latLng.lng()}};e.emitter.emit(value)});_this._observableSubscriptions.push(s)})},AgmMap._mapOptionsAttributes=["disableDoubleClickZoom","scrollwheel","draggable","draggableCursor","draggingCursor","keyboardShortcuts","zoomControl","zoomControlOptions","styles","streetViewControl","streetViewControlOptions","zoom","mapTypeControl","mapTypeControlOptions","minZoom","maxZoom","panControl","panControlOptions","rotateControl","rotateControlOptions","fullscreenControl","fullscreenControlOptions","scaleControl","scaleControlOptions","mapTypeId","clickableIcons","gestureHandling"],AgmMap.decorators=[{type:core.Component,args:[{selector:"agm-map",providers:[GoogleMapsAPIWrapper,MarkerManager,InfoWindowManager,CircleManager,RectangleManager,PolylineManager,PolygonManager,KmlLayerManager,DataLayerManager,DataLayerManager,FitBoundsService],host:{"[class.sebm-google-map-container]":"true"},styles:["\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  "],template:"\n    <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n    <div class='agm-map-content'>\n      <ng-content></ng-content>\n    </div>\n  "}]}],AgmMap.ctorParameters=function(){return[{type:core.ElementRef},{type:GoogleMapsAPIWrapper},{type:FitBoundsService}]},AgmMap.propDecorators={longitude:[{type:core.Input}],latitude:[{type:core.Input}],zoom:[{type:core.Input}],minZoom:[{type:core.Input}],maxZoom:[{type:core.Input}],draggable:[{type:core.Input,args:["mapDraggable"]}],disableDoubleClickZoom:[{type:core.Input}],disableDefaultUI:[{type:core.Input}],scrollwheel:[{type:core.Input}],backgroundColor:[{type:core.Input}],draggableCursor:[{type:core.Input}],draggingCursor:[{type:core.Input}],keyboardShortcuts:[{type:core.Input}],zoomControl:[{type:core.Input}],zoomControlOptions:[{type:core.Input}],styles:[{type:core.Input}],usePanning:[{type:core.Input}],streetViewControl:[{type:core.Input}],streetViewControlOptions:[{type:core.Input}],fitBounds:[{type:core.Input}],scaleControl:[{type:core.Input}],scaleControlOptions:[{type:core.Input}],mapTypeControl:[{type:core.Input}],mapTypeControlOptions:[{type:core.Input}],panControl:[{type:core.Input}],panControlOptions:[{type:core.Input}],rotateControl:[{type:core.Input}],rotateControlOptions:[{type:core.Input}],fullscreenControl:[{type:core.Input}],fullscreenControlOptions:[{type:core.Input}],mapTypeId:[{type:core.Input}],clickableIcons:[{type:core.Input}],gestureHandling:[{type:core.Input}],mapClick:[{type:core.Output}],mapRightClick:[{type:core.Output}],mapDblClick:[{type:core.Output}],centerChange:[{type:core.Output}],boundsChange:[{type:core.Output}],mapTypeIdChange:[{type:core.Output}],idle:[{type:core.Output}],zoomChange:[{type:core.Output}],mapReady:[{type:core.Output}]}}(),function(){function AgmCircle(_manager){this._manager=_manager,this.clickable=!0,this.draggable=!1,this.editable=!1,this.radius=0,this.strokePosition="CENTER",this.strokeWeight=0,this.visible=!0,this.centerChange=new core.EventEmitter,this.circleClick=new core.EventEmitter,this.circleDblClick=new core.EventEmitter,this.drag=new core.EventEmitter,this.dragEnd=new core.EventEmitter,this.dragStart=new core.EventEmitter,this.mouseDown=new core.EventEmitter,this.mouseMove=new core.EventEmitter,this.mouseOut=new core.EventEmitter,this.mouseOver=new core.EventEmitter,this.mouseUp=new core.EventEmitter,this.radiusChange=new core.EventEmitter,this.rightClick=new core.EventEmitter,this._circleAddedToManager=!1,this._eventSubscriptions=[]}AgmCircle.prototype.ngOnInit=function(){this._manager.addCircle(this),this._circleAddedToManager=!0,this._registerEventListeners()},AgmCircle.prototype.ngOnChanges=function(changes){this._circleAddedToManager&&((changes.latitude||changes.longitude)&&this._manager.setCenter(this),changes.editable&&this._manager.setEditable(this),changes.draggable&&this._manager.setDraggable(this),changes.visible&&this._manager.setVisible(this),changes.radius&&this._manager.setRadius(this),this._updateCircleOptionsChanges(changes))},AgmCircle.prototype._updateCircleOptionsChanges=function(changes){var options={},optionKeys=Object.keys(changes).filter(function(k){return-1!==AgmCircle._mapOptions.indexOf(k)});optionKeys.forEach(function(k){options[k]=changes[k].currentValue}),0<optionKeys.length&&this._manager.setOptions(this,options)},AgmCircle.prototype._registerEventListeners=function(){var _this=this,events=new Map;events.set("center_changed",this.centerChange),events.set("click",this.circleClick),events.set("dblclick",this.circleDblClick),events.set("drag",this.drag),events.set("dragend",this.dragEnd),events.set("dragStart",this.dragStart),events.set("mousedown",this.mouseDown),events.set("mousemove",this.mouseMove),events.set("mouseout",this.mouseOut),events.set("mouseover",this.mouseOver),events.set("mouseup",this.mouseUp),events.set("radius_changed",this.radiusChange),events.set("rightclick",this.rightClick),events.forEach(function(eventEmitter,eventName){_this._eventSubscriptions.push(_this._manager.createEventObservable(eventName,_this).subscribe(function(value){switch(eventName){case"radius_changed":_this._manager.getRadius(_this).then(function(radius){return eventEmitter.emit(radius)});break;case"center_changed":_this._manager.getCenter(_this).then(function(center){return eventEmitter.emit({lat:center.lat(),lng:center.lng()})});break;default:eventEmitter.emit({coords:{lat:value.latLng.lat(),lng:value.latLng.lng()}})}}))})},AgmCircle.prototype.ngOnDestroy=function(){this._eventSubscriptions.forEach(function(s){s.unsubscribe()}),this._eventSubscriptions=null,this._manager.removeCircle(this)},AgmCircle.prototype.getBounds=function(){return this._manager.getBounds(this)},AgmCircle.prototype.getCenter=function(){return this._manager.getCenter(this)},AgmCircle._mapOptions=["fillColor","fillOpacity","strokeColor","strokeOpacity","strokePosition","strokeWeight","visible","zIndex","clickable"],AgmCircle.decorators=[{type:core.Directive,args:[{selector:"agm-circle"}]}],AgmCircle.ctorParameters=function(){return[{type:CircleManager}]},AgmCircle.propDecorators={latitude:[{type:core.Input}],longitude:[{type:core.Input}],clickable:[{type:core.Input}],draggable:[{type:core.Input,args:["circleDraggable"]}],editable:[{type:core.Input}],fillColor:[{type:core.Input}],fillOpacity:[{type:core.Input}],radius:[{type:core.Input}],strokeColor:[{type:core.Input}],strokeOpacity:[{type:core.Input}],strokePosition:[{type:core.Input}],strokeWeight:[{type:core.Input}],visible:[{type:core.Input}],zIndex:[{type:core.Input}],centerChange:[{type:core.Output}],circleClick:[{type:core.Output}],circleDblClick:[{type:core.Output}],drag:[{type:core.Output}],dragEnd:[{type:core.Output}],dragStart:[{type:core.Output}],mouseDown:[{type:core.Output}],mouseMove:[{type:core.Output}],mouseOut:[{type:core.Output}],mouseOver:[{type:core.Output}],mouseUp:[{type:core.Output}],radiusChange:[{type:core.Output}],rightClick:[{type:core.Output}]}}(),function(){function AgmRectangle(_manager){this._manager=_manager,this.clickable=!0,this.draggable=!1,this.editable=!1,this.strokePosition="CENTER",this.strokeWeight=0,this.visible=!0,this.boundsChange=new core.EventEmitter,this.rectangleClick=new core.EventEmitter,this.rectangleDblClick=new core.EventEmitter,this.drag=new core.EventEmitter,this.dragEnd=new core.EventEmitter,this.dragStart=new core.EventEmitter,this.mouseDown=new core.EventEmitter,this.mouseMove=new core.EventEmitter,this.mouseOut=new core.EventEmitter,this.mouseOver=new core.EventEmitter,this.mouseUp=new core.EventEmitter,this.rightClick=new core.EventEmitter,this._rectangleAddedToManager=!1,this._eventSubscriptions=[]}AgmRectangle.prototype.ngOnInit=function(){this._manager.addRectangle(this),this._rectangleAddedToManager=!0,this._registerEventListeners()},AgmRectangle.prototype.ngOnChanges=function(changes){this._rectangleAddedToManager&&((changes.north||changes.east||changes.south||changes.west)&&this._manager.setBounds(this),changes.editable&&this._manager.setEditable(this),changes.draggable&&this._manager.setDraggable(this),changes.visible&&this._manager.setVisible(this),this._updateRectangleOptionsChanges(changes))},AgmRectangle.prototype._updateRectangleOptionsChanges=function(changes){var options={},optionKeys=Object.keys(changes).filter(function(k){return-1!==AgmRectangle._mapOptions.indexOf(k)});optionKeys.forEach(function(k){options[k]=changes[k].currentValue}),0<optionKeys.length&&this._manager.setOptions(this,options)},AgmRectangle.prototype._registerEventListeners=function(){var _this=this,events=new Map;events.set("bounds_changed",this.boundsChange),events.set("click",this.rectangleClick),events.set("dblclick",this.rectangleDblClick),events.set("drag",this.drag),events.set("dragend",this.dragEnd),events.set("dragStart",this.dragStart),events.set("mousedown",this.mouseDown),events.set("mousemove",this.mouseMove),events.set("mouseout",this.mouseOut),events.set("mouseover",this.mouseOver),events.set("mouseup",this.mouseUp),events.set("rightclick",this.rightClick),events.forEach(function(eventEmitter,eventName){_this._eventSubscriptions.push(_this._manager.createEventObservable(eventName,_this).subscribe(function(value){switch(eventName){case"bounds_changed":_this._manager.getBounds(_this).then(function(bounds){return eventEmitter.emit({north:bounds.getNorthEast().lat(),east:bounds.getNorthEast().lng(),south:bounds.getSouthWest().lat(),west:bounds.getSouthWest().lng()})});break;default:eventEmitter.emit({coords:{lat:value.latLng.lat(),lng:value.latLng.lng()}})}}))})},AgmRectangle.prototype.ngOnDestroy=function(){this._eventSubscriptions.forEach(function(s){s.unsubscribe()}),this._eventSubscriptions=null,this._manager.removeRectangle(this)},AgmRectangle.prototype.getBounds=function(){return this._manager.getBounds(this)},AgmRectangle._mapOptions=["fillColor","fillOpacity","strokeColor","strokeOpacity","strokePosition","strokeWeight","visible","zIndex","clickable"],AgmRectangle.decorators=[{type:core.Directive,args:[{selector:"agm-rectangle"}]}],AgmRectangle.ctorParameters=function(){return[{type:RectangleManager}]},AgmRectangle.propDecorators={north:[{type:core.Input}],east:[{type:core.Input}],south:[{type:core.Input}],west:[{type:core.Input}],clickable:[{type:core.Input}],draggable:[{type:core.Input,args:["rectangleDraggable"]}],editable:[{type:core.Input}],fillColor:[{type:core.Input}],fillOpacity:[{type:core.Input}],strokeColor:[{type:core.Input}],strokeOpacity:[{type:core.Input}],strokePosition:[{type:core.Input}],strokeWeight:[{type:core.Input}],visible:[{type:core.Input}],zIndex:[{type:core.Input}],boundsChange:[{type:core.Output}],rectangleClick:[{type:core.Output}],rectangleDblClick:[{type:core.Output}],drag:[{type:core.Output}],dragEnd:[{type:core.Output}],dragStart:[{type:core.Output}],mouseDown:[{type:core.Output}],mouseMove:[{type:core.Output}],mouseOut:[{type:core.Output}],mouseOver:[{type:core.Output}],mouseUp:[{type:core.Output}],rightClick:[{type:core.Output}]}}(),0),AgmInfoWindow=function(){function AgmInfoWindow(_infoWindowManager,_el){this._infoWindowManager=_infoWindowManager,this._el=_el,this.isOpen=!1,this.infoWindowClose=new core.EventEmitter,this._infoWindowAddedToManager=!1,this._id=(infoWindowId++).toString()}return AgmInfoWindow.prototype.ngOnInit=function(){this.content=this._el.nativeElement.querySelector(".agm-info-window-content"),this._infoWindowManager.addInfoWindow(this),this._infoWindowAddedToManager=!0,this._updateOpenState(),this._registerEventListeners()},AgmInfoWindow.prototype.ngOnChanges=function(changes){this._infoWindowAddedToManager&&((changes.latitude||changes.longitude)&&"number"==typeof this.latitude&&"number"==typeof this.longitude&&this._infoWindowManager.setPosition(this),changes.zIndex&&this._infoWindowManager.setZIndex(this),changes.isOpen&&this._updateOpenState(),this._setInfoWindowOptions(changes))},AgmInfoWindow.prototype._registerEventListeners=function(){var _this=this;this._infoWindowManager.createEventObservable("closeclick",this).subscribe(function(){_this.isOpen=!1,_this.infoWindowClose.emit()})},AgmInfoWindow.prototype._updateOpenState=function(){this.isOpen?this.open():this.close()},AgmInfoWindow.prototype._setInfoWindowOptions=function(changes){var options={};Object.keys(changes).filter(function(k){return-1!==AgmInfoWindow._infoWindowOptionsInputs.indexOf(k)}).forEach(function(k){options[k]=changes[k].currentValue}),this._infoWindowManager.setOptions(this,options)},AgmInfoWindow.prototype.open=function(){return this._infoWindowManager.open(this)},AgmInfoWindow.prototype.close=function(){var _this=this;return this._infoWindowManager.close(this).then(function(){_this.infoWindowClose.emit()})},AgmInfoWindow.prototype.id=function(){return this._id},AgmInfoWindow.prototype.toString=function(){return"AgmInfoWindow-"+this._id.toString()},AgmInfoWindow.prototype.ngOnDestroy=function(){this._infoWindowManager.deleteInfoWindow(this)},AgmInfoWindow._infoWindowOptionsInputs=["disableAutoPan","maxWidth"],AgmInfoWindow.decorators=[{type:core.Component,args:[{selector:"agm-info-window",template:"<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  "}]}],AgmInfoWindow.ctorParameters=function(){return[{type:InfoWindowManager},{type:core.ElementRef}]},AgmInfoWindow.propDecorators={latitude:[{type:core.Input}],longitude:[{type:core.Input}],disableAutoPan:[{type:core.Input}],zIndex:[{type:core.Input}],maxWidth:[{type:core.Input}],isOpen:[{type:core.Input}],infoWindowClose:[{type:core.Output}]},AgmInfoWindow}(),layerId=0,layerId$1=(function(){function AgmKmlLayer(_manager){this._manager=_manager,this._addedToManager=!1,this._id=(layerId++).toString(),this._subscriptions=[],this.clickable=!0,this.preserveViewport=!1,this.screenOverlays=!0,this.suppressInfoWindows=!1,this.url=null,this.zIndex=null,this.layerClick=new core.EventEmitter,this.defaultViewportChange=new core.EventEmitter,this.statusChange=new core.EventEmitter}AgmKmlLayer.prototype.ngOnInit=function(){this._addedToManager||(this._manager.addKmlLayer(this),this._addedToManager=!0,this._addEventListeners())},AgmKmlLayer.prototype.ngOnChanges=function(changes){this._addedToManager&&this._updatePolygonOptions(changes)},AgmKmlLayer.prototype._updatePolygonOptions=function(changes){var options=Object.keys(changes).filter(function(k){return-1!==AgmKmlLayer._kmlLayerOptions.indexOf(k)}).reduce(function(obj,k){return obj[k]=changes[k].currentValue,obj},{});0<Object.keys(options).length&&this._manager.setOptions(this,options)},AgmKmlLayer.prototype._addEventListeners=function(){var _this=this;[{name:"click",handler:function(ev){return _this.layerClick.emit(ev)}},{name:"defaultviewport_changed",handler:function(){return _this.defaultViewportChange.emit()}},{name:"status_changed",handler:function(){return _this.statusChange.emit()}}].forEach(function(obj){var os=_this._manager.createEventObservable(obj.name,_this).subscribe(obj.handler);_this._subscriptions.push(os)})},AgmKmlLayer.prototype.id=function(){return this._id},AgmKmlLayer.prototype.toString=function(){return"AgmKmlLayer-"+this._id.toString()},AgmKmlLayer.prototype.ngOnDestroy=function(){this._manager.deleteKmlLayer(this),this._subscriptions.forEach(function(s){return s.unsubscribe()})},AgmKmlLayer._kmlLayerOptions=["clickable","preserveViewport","screenOverlays","suppressInfoWindows","url","zIndex"],AgmKmlLayer.decorators=[{type:core.Directive,args:[{selector:"agm-kml-layer"}]}],AgmKmlLayer.ctorParameters=function(){return[{type:KmlLayerManager}]},AgmKmlLayer.propDecorators={clickable:[{type:core.Input}],preserveViewport:[{type:core.Input}],screenOverlays:[{type:core.Input}],suppressInfoWindows:[{type:core.Input}],url:[{type:core.Input}],zIndex:[{type:core.Input}],layerClick:[{type:core.Output}],defaultViewportChange:[{type:core.Output}],statusChange:[{type:core.Output}]}}(),0),markerId=(function(){function AgmDataLayer(_manager){this._manager=_manager,this._addedToManager=!1,this._id=(layerId$1++).toString(),this._subscriptions=[],this.layerClick=new core.EventEmitter,this.geoJson=null}AgmDataLayer.prototype.ngOnInit=function(){this._addedToManager||(this._manager.addDataLayer(this),this._addedToManager=!0,this._addEventListeners())},AgmDataLayer.prototype._addEventListeners=function(){var _this=this;[{name:"click",handler:function(ev){return _this.layerClick.emit(ev)}}].forEach(function(obj){var os=_this._manager.createEventObservable(obj.name,_this).subscribe(obj.handler);_this._subscriptions.push(os)})},AgmDataLayer.prototype.id=function(){return this._id},AgmDataLayer.prototype.toString=function(){return"AgmDataLayer-"+this._id.toString()},AgmDataLayer.prototype.ngOnDestroy=function(){this._manager.deleteDataLayer(this),this._subscriptions.forEach(function(s){return s.unsubscribe()})},AgmDataLayer.prototype.ngOnChanges=function(changes){var _this=this;if(this._addedToManager){var geoJsonChange=changes.geoJson;geoJsonChange&&this._manager.updateGeoJson(this,geoJsonChange.currentValue);var dataOptions={};AgmDataLayer._dataOptionsAttributes.forEach(function(k){return dataOptions[k]=changes.hasOwnProperty(k)?changes[k].currentValue:_this[k]}),this._manager.setDataOptions(this,dataOptions)}},AgmDataLayer._dataOptionsAttributes=["style"],AgmDataLayer.decorators=[{type:core.Directive,args:[{selector:"agm-data-layer"}]}],AgmDataLayer.ctorParameters=function(){return[{type:DataLayerManager}]},AgmDataLayer.propDecorators={layerClick:[{type:core.Output}],geoJson:[{type:core.Input}],style:[{type:core.Input}]}}(),0),AgmPolylinePoint=(function(){function AgmMarker(_markerManager){this._markerManager=_markerManager,this.draggable=!1,this.visible=!0,this.openInfoWindow=!0,this.opacity=1,this.zIndex=1,this.clickable=!0,this.markerClick=new core.EventEmitter,this.markerRightClick=new core.EventEmitter,this.dragEnd=new core.EventEmitter,this.mouseOver=new core.EventEmitter,this.mouseOut=new core.EventEmitter,this.infoWindow=new core.QueryList,this._markerAddedToManger=!1,this._observableSubscriptions=[],this._fitBoundsDetails$=new rxjs.ReplaySubject(1),this._id=(markerId++).toString()}AgmMarker.prototype.ngAfterContentInit=function(){var _this=this;this.handleInfoWindowUpdate(),this.infoWindow.changes.subscribe(function(){return _this.handleInfoWindowUpdate()})},AgmMarker.prototype.handleInfoWindowUpdate=function(){var _this=this;if(1<this.infoWindow.length)throw new Error("Expected no more than one info window.");this.infoWindow.forEach(function(marker){marker.hostMarker=_this})},AgmMarker.prototype.ngOnChanges=function(changes){if("string"==typeof this.latitude&&(this.latitude=Number(this.latitude)),"string"==typeof this.longitude&&(this.longitude=Number(this.longitude)),"number"==typeof this.latitude&&"number"==typeof this.longitude){if(!this._markerAddedToManger)return this._markerManager.addMarker(this),this._updateFitBoundsDetails(),this._markerAddedToManger=!0,void this._addEventListeners();(changes.latitude||changes.longitude)&&(this._markerManager.updateMarkerPosition(this),this._updateFitBoundsDetails()),changes.title&&this._markerManager.updateTitle(this),changes.label&&this._markerManager.updateLabel(this),changes.draggable&&this._markerManager.updateDraggable(this),changes.iconUrl&&this._markerManager.updateIcon(this),changes.opacity&&this._markerManager.updateOpacity(this),changes.visible&&this._markerManager.updateVisible(this),changes.zIndex&&this._markerManager.updateZIndex(this),changes.clickable&&this._markerManager.updateClickable(this),changes.animation&&this._markerManager.updateAnimation(this)}},AgmMarker.prototype.getFitBoundsDetails$=function(){return this._fitBoundsDetails$.asObservable()},AgmMarker.prototype._updateFitBoundsDetails=function(){this._fitBoundsDetails$.next({latLng:{lat:this.latitude,lng:this.longitude}})},AgmMarker.prototype._addEventListeners=function(){var _this=this,cs=this._markerManager.createEventObservable("click",this).subscribe(function(){_this.openInfoWindow&&_this.infoWindow.forEach(function(infoWindow){return infoWindow.open()}),_this.markerClick.emit(_this)});this._observableSubscriptions.push(cs);var rc=this._markerManager.createEventObservable("rightclick",this).subscribe(function(){_this.markerRightClick.emit(null)});this._observableSubscriptions.push(rc);var ds=this._markerManager.createEventObservable("dragend",this).subscribe(function(e){_this.dragEnd.emit({coords:{lat:e.latLng.lat(),lng:e.latLng.lng()}})});this._observableSubscriptions.push(ds);var mover=this._markerManager.createEventObservable("mouseover",this).subscribe(function(e){_this.mouseOver.emit({coords:{lat:e.latLng.lat(),lng:e.latLng.lng()}})});this._observableSubscriptions.push(mover);var mout=this._markerManager.createEventObservable("mouseout",this).subscribe(function(e){_this.mouseOut.emit({coords:{lat:e.latLng.lat(),lng:e.latLng.lng()}})});this._observableSubscriptions.push(mout)},AgmMarker.prototype.id=function(){return this._id},AgmMarker.prototype.toString=function(){return"AgmMarker-"+this._id.toString()},AgmMarker.prototype.ngOnDestroy=function(){this._markerManager.deleteMarker(this),this._observableSubscriptions.forEach(function(s){return s.unsubscribe()})},AgmMarker.decorators=[{type:core.Directive,args:[{selector:"agm-marker",providers:[{provide:FitBoundsAccessor,useExisting:core.forwardRef(function(){return AgmMarker})}],inputs:["latitude","longitude","title","label","draggable: markerDraggable","iconUrl","openInfoWindow","opacity","visible","zIndex","animation"],outputs:["markerClick","dragEnd","mouseOver","mouseOut"]}]}],AgmMarker.ctorParameters=function(){return[{type:MarkerManager}]},AgmMarker.propDecorators={latitude:[{type:core.Input}],longitude:[{type:core.Input}],title:[{type:core.Input}],label:[{type:core.Input}],draggable:[{type:core.Input,args:["markerDraggable"]}],iconUrl:[{type:core.Input}],visible:[{type:core.Input}],openInfoWindow:[{type:core.Input}],opacity:[{type:core.Input}],zIndex:[{type:core.Input}],clickable:[{type:core.Input,args:["markerClickable"]}],markerClick:[{type:core.Output}],markerRightClick:[{type:core.Output}],dragEnd:[{type:core.Output}],mouseOver:[{type:core.Output}],mouseOut:[{type:core.Output}],infoWindow:[{type:core.ContentChildren,args:[AgmInfoWindow]}]}}(),function(){function AgmPolygon(_polygonManager){this._polygonManager=_polygonManager,this.clickable=!0,this.draggable=!1,this.editable=!1,this.geodesic=!1,this.paths=[],this.polyClick=new core.EventEmitter,this.polyDblClick=new core.EventEmitter,this.polyDrag=new core.EventEmitter,this.polyDragEnd=new core.EventEmitter,this.polyDragStart=new core.EventEmitter,this.polyMouseDown=new core.EventEmitter,this.polyMouseMove=new core.EventEmitter,this.polyMouseOut=new core.EventEmitter,this.polyMouseOver=new core.EventEmitter,this.polyMouseUp=new core.EventEmitter,this.polyRightClick=new core.EventEmitter,this._polygonAddedToManager=!1,this._subscriptions=[]}AgmPolygon.prototype.ngAfterContentInit=function(){this._polygonAddedToManager||this._init()},AgmPolygon.prototype.ngOnChanges=function(changes){this._polygonAddedToManager?this._polygonManager.setPolygonOptions(this,this._updatePolygonOptions(changes)):this._init()},AgmPolygon.prototype._init=function(){this._polygonManager.addPolygon(this),this._polygonAddedToManager=!0,this._addEventListeners()},AgmPolygon.prototype._addEventListeners=function(){var _this=this;[{name:"click",handler:function(ev){return _this.polyClick.emit(ev)}},{name:"dblclick",handler:function(ev){return _this.polyDblClick.emit(ev)}},{name:"drag",handler:function(ev){return _this.polyDrag.emit(ev)}},{name:"dragend",handler:function(ev){return _this.polyDragEnd.emit(ev)}},{name:"dragstart",handler:function(ev){return _this.polyDragStart.emit(ev)}},{name:"mousedown",handler:function(ev){return _this.polyMouseDown.emit(ev)}},{name:"mousemove",handler:function(ev){return _this.polyMouseMove.emit(ev)}},{name:"mouseout",handler:function(ev){return _this.polyMouseOut.emit(ev)}},{name:"mouseover",handler:function(ev){return _this.polyMouseOver.emit(ev)}},{name:"mouseup",handler:function(ev){return _this.polyMouseUp.emit(ev)}},{name:"rightclick",handler:function(ev){return _this.polyRightClick.emit(ev)}}].forEach(function(obj){var os=_this._polygonManager.createEventObservable(obj.name,_this).subscribe(obj.handler);_this._subscriptions.push(os)})},AgmPolygon.prototype._updatePolygonOptions=function(changes){return Object.keys(changes).filter(function(k){return-1!==AgmPolygon._polygonOptionsAttributes.indexOf(k)}).reduce(function(obj,k){return obj[k]=changes[k].currentValue,obj},{})},AgmPolygon.prototype.id=function(){return this._id},AgmPolygon.prototype.ngOnDestroy=function(){this._polygonManager.deletePolygon(this),this._subscriptions.forEach(function(s){return s.unsubscribe()})},AgmPolygon._polygonOptionsAttributes=["clickable","draggable","editable","fillColor","fillOpacity","geodesic","icon","map","paths","strokeColor","strokeOpacity","strokeWeight","visible","zIndex","draggable","editable","visible"],AgmPolygon.decorators=[{type:core.Directive,args:[{selector:"agm-polygon"}]}],AgmPolygon.ctorParameters=function(){return[{type:PolygonManager}]},AgmPolygon.propDecorators={clickable:[{type:core.Input}],draggable:[{type:core.Input,args:["polyDraggable"]}],editable:[{type:core.Input}],fillColor:[{type:core.Input}],fillOpacity:[{type:core.Input}],geodesic:[{type:core.Input}],paths:[{type:core.Input}],strokeColor:[{type:core.Input}],strokeOpacity:[{type:core.Input}],strokeWeight:[{type:core.Input}],visible:[{type:core.Input}],zIndex:[{type:core.Input}],polyClick:[{type:core.Output}],polyDblClick:[{type:core.Output}],polyDrag:[{type:core.Output}],polyDragEnd:[{type:core.Output}],polyDragStart:[{type:core.Output}],polyMouseDown:[{type:core.Output}],polyMouseMove:[{type:core.Output}],polyMouseOut:[{type:core.Output}],polyMouseOver:[{type:core.Output}],polyMouseUp:[{type:core.Output}],polyRightClick:[{type:core.Output}]}}(),function(){function AgmPolylinePoint(){this.positionChanged=new core.EventEmitter}return AgmPolylinePoint.prototype.ngOnChanges=function(changes){if(changes.latitude||changes.longitude){var position={lat:changes.latitude.currentValue,lng:changes.longitude.currentValue};this.positionChanged.emit(position)}},AgmPolylinePoint.decorators=[{type:core.Directive,args:[{selector:"agm-polyline-point"}]}],AgmPolylinePoint.ctorParameters=function(){return[]},AgmPolylinePoint.propDecorators={latitude:[{type:core.Input}],longitude:[{type:core.Input}],positionChanged:[{type:core.Output}]},AgmPolylinePoint}()),polylineId=0,WindowRef=(function(){function AgmPolyline(_polylineManager){this._polylineManager=_polylineManager,this.clickable=!0,this.draggable=!1,this.editable=!1,this.geodesic=!1,this.visible=!0,this.lineClick=new core.EventEmitter,this.lineDblClick=new core.EventEmitter,this.lineDrag=new core.EventEmitter,this.lineDragEnd=new core.EventEmitter,this.lineDragStart=new core.EventEmitter,this.lineMouseDown=new core.EventEmitter,this.lineMouseMove=new core.EventEmitter,this.lineMouseOut=new core.EventEmitter,this.lineMouseOver=new core.EventEmitter,this.lineMouseUp=new core.EventEmitter,this.lineRightClick=new core.EventEmitter,this._polylineAddedToManager=!1,this._subscriptions=[],this._id=(polylineId++).toString()}AgmPolyline.prototype.ngAfterContentInit=function(){var _this=this;this.points.length&&this.points.forEach(function(point){var s=point.positionChanged.subscribe(function(){_this._polylineManager.updatePolylinePoints(_this)});_this._subscriptions.push(s)}),this._polylineAddedToManager||this._init();var s=this.points.changes.subscribe(function(){return _this._polylineManager.updatePolylinePoints(_this)});this._subscriptions.push(s),this._polylineManager.updatePolylinePoints(this)},AgmPolyline.prototype.ngOnChanges=function(changes){if(this._polylineAddedToManager){var options={};Object.keys(changes).filter(function(k){return-1!==AgmPolyline._polylineOptionsAttributes.indexOf(k)}).forEach(function(k){return options[k]=changes[k].currentValue}),this._polylineManager.setPolylineOptions(this,options)}else this._init()},AgmPolyline.prototype._init=function(){this._polylineManager.addPolyline(this),this._polylineAddedToManager=!0,this._addEventListeners()},AgmPolyline.prototype._addEventListeners=function(){var _this=this;[{name:"click",handler:function(ev){return _this.lineClick.emit(ev)}},{name:"dblclick",handler:function(ev){return _this.lineDblClick.emit(ev)}},{name:"drag",handler:function(ev){return _this.lineDrag.emit(ev)}},{name:"dragend",handler:function(ev){return _this.lineDragEnd.emit(ev)}},{name:"dragstart",handler:function(ev){return _this.lineDragStart.emit(ev)}},{name:"mousedown",handler:function(ev){return _this.lineMouseDown.emit(ev)}},{name:"mousemove",handler:function(ev){return _this.lineMouseMove.emit(ev)}},{name:"mouseout",handler:function(ev){return _this.lineMouseOut.emit(ev)}},{name:"mouseover",handler:function(ev){return _this.lineMouseOver.emit(ev)}},{name:"mouseup",handler:function(ev){return _this.lineMouseUp.emit(ev)}},{name:"rightclick",handler:function(ev){return _this.lineRightClick.emit(ev)}}].forEach(function(obj){var os=_this._polylineManager.createEventObservable(obj.name,_this).subscribe(obj.handler);_this._subscriptions.push(os)})},AgmPolyline.prototype._getPoints=function(){return this.points?this.points.toArray():[]},AgmPolyline.prototype.id=function(){return this._id},AgmPolyline.prototype.ngOnDestroy=function(){this._polylineManager.deletePolyline(this),this._subscriptions.forEach(function(s){return s.unsubscribe()})},AgmPolyline._polylineOptionsAttributes=["draggable","editable","visible","geodesic","strokeColor","strokeOpacity","strokeWeight","zIndex"],AgmPolyline.decorators=[{type:core.Directive,args:[{selector:"agm-polyline"}]}],AgmPolyline.ctorParameters=function(){return[{type:PolylineManager}]},AgmPolyline.propDecorators={clickable:[{type:core.Input}],draggable:[{type:core.Input,args:["polylineDraggable"]}],editable:[{type:core.Input}],geodesic:[{type:core.Input}],strokeColor:[{type:core.Input}],strokeOpacity:[{type:core.Input}],strokeWeight:[{type:core.Input}],visible:[{type:core.Input}],zIndex:[{type:core.Input}],lineClick:[{type:core.Output}],lineDblClick:[{type:core.Output}],lineDrag:[{type:core.Output}],lineDragEnd:[{type:core.Output}],lineDragStart:[{type:core.Output}],lineMouseDown:[{type:core.Output}],lineMouseMove:[{type:core.Output}],lineMouseOut:[{type:core.Output}],lineMouseOver:[{type:core.Output}],lineMouseUp:[{type:core.Output}],lineRightClick:[{type:core.Output}],points:[{type:core.ContentChildren,args:[AgmPolylinePoint]}]}}(),function(){function AgmFitBounds(_fitBoundsAccessor,_fitBoundsService){this._fitBoundsAccessor=_fitBoundsAccessor,this._fitBoundsService=_fitBoundsService,this.agmFitBounds=!0,this._destroyed$=new rxjs.Subject,this._latestFitBoundsDetails=null}AgmFitBounds.prototype.ngOnChanges=function(changes){this._updateBounds()},AgmFitBounds.prototype.ngOnInit=function(){var _this=this;this._fitBoundsAccessor.getFitBoundsDetails$().pipe(operators.distinctUntilChanged(function(x,y){return x.latLng.lat===y.latLng.lng}),operators.takeUntil(this._destroyed$)).subscribe(function(details){return _this._updateBounds(details)})},AgmFitBounds.prototype._updateBounds=function(newFitBoundsDetails){newFitBoundsDetails&&(this._latestFitBoundsDetails=newFitBoundsDetails),this._latestFitBoundsDetails&&(this.agmFitBounds?this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng):this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng))},AgmFitBounds.prototype.ngOnDestroy=function(){this._destroyed$.next(),this._destroyed$.complete(),null!==this._latestFitBoundsDetails&&this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng)},AgmFitBounds.decorators=[{type:core.Directive,args:[{selector:"[agmFitBounds]"}]}],AgmFitBounds.ctorParameters=function(){return[{type:FitBoundsAccessor,decorators:[{type:core.Self}]},{type:FitBoundsService}]},AgmFitBounds.propDecorators={agmFitBounds:[{type:core.Input}]}}(),function(){function WindowRef(){}return WindowRef.prototype.getNativeWindow=function(){return window},WindowRef}()),DocumentRef=function(){function DocumentRef(){}return DocumentRef.prototype.getNativeDocument=function(){return document},DocumentRef}(),__extends=(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)b.hasOwnProperty(p)&&(d[p]=b[p])},function(d,b){function __(){this.constructor=d}extendStatics(d,b),d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)});!function(GoogleMapsScriptProtocol){GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.HTTP=1]="HTTP",GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.HTTPS=2]="HTTPS",GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.AUTO=3]="AUTO"}(GoogleMapsScriptProtocol||(GoogleMapsScriptProtocol={}));var LAZY_MAPS_API_CONFIG=new core.InjectionToken("angular-google-maps LAZY_MAPS_API_CONFIG"),AgmDirection=(function(_super){function LazyMapsAPILoader(config,w,d){void 0===config&&(config=null);var _this=_super.call(this)||this;return _this._SCRIPT_ID="agmGoogleMapsApiScript",_this.callbackName="agmLazyMapsAPILoader",_this._config=config||{},_this._windowRef=w,_this._documentRef=d,_this}__extends(LazyMapsAPILoader,_super),LazyMapsAPILoader.prototype.load=function(){var window=this._windowRef.getNativeWindow();if(window.google&&window.google.maps)return Promise.resolve();if(this._scriptLoadingPromise)return this._scriptLoadingPromise;var scriptOnPage=this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);if(scriptOnPage)return this._assignScriptLoadingPromise(scriptOnPage),this._scriptLoadingPromise;var script=this._documentRef.getNativeDocument().createElement("script");return script.type="text/javascript",script.async=!0,script.defer=!0,script.id=this._SCRIPT_ID,script.src=this._getScriptSrc(this.callbackName),this._assignScriptLoadingPromise(script),this._documentRef.getNativeDocument().body.appendChild(script),this._scriptLoadingPromise},LazyMapsAPILoader.prototype._assignScriptLoadingPromise=function(scriptElem){var _this=this;this._scriptLoadingPromise=new Promise(function(resolve,reject){_this._windowRef.getNativeWindow()[_this.callbackName]=function(){resolve()},scriptElem.onerror=function(error){reject(error)}})},LazyMapsAPILoader.prototype._getScriptSrc=function(callbackName){var protocol;switch(this._config&&this._config.protocol||GoogleMapsScriptProtocol.HTTPS){case GoogleMapsScriptProtocol.AUTO:protocol="";break;case GoogleMapsScriptProtocol.HTTP:protocol="http:";break;case GoogleMapsScriptProtocol.HTTPS:protocol="https:"}var hostAndPath=this._config.hostAndPath||"maps.googleapis.com/maps/api/js",queryParams={v:this._config.apiVersion||"3",callback:callbackName,key:this._config.apiKey,client:this._config.clientId,channel:this._config.channel,libraries:this._config.libraries,region:this._config.region,language:this._config.language};return protocol+"//"+hostAndPath+"?"+Object.keys(queryParams).filter(function(k){return null!=queryParams[k]}).filter(function(k){return!Array.isArray(queryParams[k])||Array.isArray(queryParams[k])&&0<queryParams[k].length}).map(function(k){var i=queryParams[k];return Array.isArray(i)?{key:k,value:i.join(",")}:{key:k,value:queryParams[k]}}).map(function(entry){return entry.key+"="+entry.value}).join("&")},LazyMapsAPILoader.decorators=[{type:core.Injectable}],LazyMapsAPILoader.ctorParameters=function(){return[{type:void 0,decorators:[{type:core.Optional},{type:core.Inject,args:[LAZY_MAPS_API_CONFIG]}]},{type:WindowRef},{type:DocumentRef}]}}(MapsAPILoader),function(){function AgmDirection(gmapsApi){this.gmapsApi=gmapsApi,this.travelMode="DRIVING",this.transitOptions=void 0,this.drivingOptions=void 0,this.waypoints=[],this.optimizeWaypoints=!0,this.provideRouteAlternatives=!1,this.avoidHighways=!1,this.avoidTolls=!1,this.visible=!0,this.onChange=new core.EventEmitter,this.onResponse=new core.EventEmitter,this.sendInfoWindow=new core.EventEmitter,this.status=new core.EventEmitter,this.originDrag=new core.EventEmitter,this.destinationDrag=new core.EventEmitter,this.directionsService=void 0,this.directionsDisplay=void 0,this.waypointsMarker=[],this.isFirstChange=!0}return AgmDirection.prototype.ngOnInit=function(){!0===this.visible&&this.directionDraw()},AgmDirection.prototype.ngOnChanges=function(obj){if(this.visible){if(this.isFirstChange)return void 0===this.directionsDisplay&&this.directionDraw(),void(this.isFirstChange=!1);void 0!==obj.renderOptions&&!1===obj.renderOptions.firstChange&&(this.removeMarkers(),this.removeDirections()),this.directionDraw()}else try{this.removeMarkers(),this.removeDirections()}catch(e){}},AgmDirection.prototype.ngOnDestroy=function(){this.destroyMarkers(),this.removeDirections()},AgmDirection.prototype.directionDraw=function(){var _this=this;this.gmapsApi.getNativeMap().then(function(map){void 0===_this.directionsDisplay&&(_this.directionsDisplay=new google.maps.DirectionsRenderer(_this.renderOptions),_this.directionsDisplay.setMap(map),_this.directionsDisplay.addListener("directions_changed",function(){_this.onChange.emit(_this.directionsDisplay.getDirections())})),void 0===_this.directionsService&&(_this.directionsService=new google.maps.DirectionsService),void 0===_this.panel?_this.directionsDisplay.setPanel(null):_this.directionsDisplay.setPanel(_this.panel),"object"==typeof _this.renderRoute&&null!==_this.renderRoute?(_this.directionsDisplay.setDirections(_this.renderRoute),_this.renderRoute=null):_this.directionsService.route({origin:_this.origin,destination:_this.destination,travelMode:_this.travelMode,transitOptions:_this.transitOptions,drivingOptions:_this.drivingOptions,waypoints:_this.waypoints,optimizeWaypoints:_this.optimizeWaypoints,provideRouteAlternatives:_this.provideRouteAlternatives,avoidHighways:_this.avoidHighways,avoidTolls:_this.avoidTolls},function(response,status){switch(_this.onResponse.emit(response),_this.status.emit(status),status){case"OK":if(_this.directionsDisplay.setDirections(response),void 0!==_this.markerOptions){_this.destroyMarkers();var _route_1=response.routes[0].legs[0];try{void 0!==_this.markerOptions.origin&&(_this.markerOptions.origin.map=map,_this.markerOptions.origin.position=_route_1.start_location,_this.originMarker=_this.setMarker(map,_this.originMarker,_this.markerOptions.origin,_route_1.start_address),_this.markerOptions.origin.draggable&&_this.originMarker.addListener("dragend",function(){_this.origin=_this.originMarker.position,_this.directionDraw(),_this.originDrag.emit(_this.origin)})),void 0!==_this.markerOptions.destination&&(_this.markerOptions.destination.map=map,_this.markerOptions.destination.position=_route_1.end_location,_this.destinationMarker=_this.setMarker(map,_this.destinationMarker,_this.markerOptions.destination,_route_1.end_address),_this.markerOptions.destination.draggable&&_this.destinationMarker.addListener("dragend",function(){_this.destination=_this.destinationMarker.position,_this.directionDraw(),_this.destinationDrag.emit(_this.destination)})),void 0!==_this.markerOptions.waypoints&&_this.waypoints.forEach(function(waypoint,index){Array.isArray(_this.markerOptions.waypoints)?(_this.markerOptions.waypoints[index].map=map,_this.markerOptions.waypoints[index].position=_route_1.via_waypoints[index],_this.waypointsMarker.push(_this.setMarker(map,waypoint,_this.markerOptions.waypoints[index],_route_1.via_waypoints[index]))):(_this.markerOptions.waypoints.map=map,_this.markerOptions.waypoints.position=_route_1.via_waypoints[index],_this.waypointsMarker.push(_this.setMarker(map,waypoint,_this.markerOptions.waypoints,_route_1.via_waypoints[index])))})}catch(err){console.error("MarkerOptions error.",err)}}}})})},AgmDirection.prototype.setMarker=function(map,marker,markerOpts,content){var _this=this;return void 0===this.infoWindow&&(this.infoWindow=new google.maps.InfoWindow({}),this.sendInfoWindow.emit(this.infoWindow)),(marker=new google.maps.Marker(markerOpts)).addListener("click",function(){var infowindoContent=void 0===markerOpts.infoWindow?content:markerOpts.infoWindow;_this.infoWindow.setContent(infowindoContent),_this.infoWindow.open(map,marker)}),marker},AgmDirection.prototype.removeMarkers=function(){void 0!==this.originMarker&&this.originMarker.setMap(null),void 0!==this.destinationMarker&&this.destinationMarker.setMap(null),this.waypointsMarker.forEach(function(w){void 0!==w&&w.setMap(null)})},AgmDirection.prototype.removeDirections=function(){this.directionsDisplay.setPanel(null),this.directionsDisplay.setMap(null),this.directionsDisplay=void 0},AgmDirection.prototype.destroyMarkers=function(){try{void 0!==this.originMarker&&(google.maps.event.clearListeners(this.originMarker,"click"),this.markerOptions.origin.draggable&&google.maps.event.clearListeners(this.originMarker,"dragend")),void 0!==this.destinationMarker&&(google.maps.event.clearListeners(this.destinationMarker,"click"),this.markerOptions.origin.draggable&&google.maps.event.clearListeners(this.destinationMarker,"dragend")),this.waypointsMarker.forEach(function(w){void 0!==w&&google.maps.event.clearListeners(w,"click")}),this.removeMarkers()}catch(err){console.error("Can not reset custom marker.",err)}},AgmDirection.decorators=[{type:core.Directive,args:[{selector:"agm-direction"}]}],AgmDirection.ctorParameters=function(){return[{type:GoogleMapsAPIWrapper}]},AgmDirection.propDecorators={origin:[{type:core.Input}],destination:[{type:core.Input}],travelMode:[{type:core.Input}],transitOptions:[{type:core.Input}],drivingOptions:[{type:core.Input}],waypoints:[{type:core.Input}],optimizeWaypoints:[{type:core.Input}],provideRouteAlternatives:[{type:core.Input}],avoidHighways:[{type:core.Input}],avoidTolls:[{type:core.Input}],renderOptions:[{type:core.Input}],panel:[{type:core.Input}],markerOptions:[{type:core.Input}],infoWindow:[{type:core.Input}],visible:[{type:core.Input}],renderRoute:[{type:core.Input}],onChange:[{type:core.Output}],onResponse:[{type:core.Output}],sendInfoWindow:[{type:core.Output}],status:[{type:core.Output}],originDrag:[{type:core.Output}],destinationDrag:[{type:core.Output}]},AgmDirection}()),AgmDirectionModule=function(){function AgmDirectionModule(){}return AgmDirectionModule.forRoot=function(){return{ngModule:AgmDirectionModule}},AgmDirectionModule.decorators=[{type:core.NgModule,args:[{imports:[],declarations:[AgmDirection],exports:[AgmDirection]}]}],AgmDirectionModule}();exports.AgmDirectionModule=AgmDirectionModule,exports.ɵa=AgmDirection,Object.defineProperty(exports,"__esModule",{value:!0})});